import { promises as fs } from 'node:fs';
import path from 'node:path';
import { ulid } from 'ulid';

export type ScaffoldParams = { analysisId: string; appRouter?: boolean };

async function ensureDir(p: string) {
  await fs.mkdir(p, { recursive: true });
}

async function writeFile(p: string, content: string) {
  await ensureDir(path.dirname(p));
  await fs.writeFile(p, content);
}

export async function scaffold(_params: ScaffoldParams): Promise<{ jobId: string; scaffoldId: string; outDir: string }> {
  const jobId = ulid();
  const scaffoldId = ulid();
  const outDir = path.join('.site2ts', 'staging');
  const appDir = path.join(outDir, 'app');

  await ensureDir(outDir);

  // package.json (versions are indicative; exact pins are handled by pins.json)
  await writeFile(
    path.join(outDir, 'package.json'),
    JSON.stringify(
      {
        name: 'site2ts-app',
        private: true,
        type: 'module',
        scripts: {
          dev: 'next dev',
          build: 'next build',
          start: 'next start',
          lint: 'next lint'
        },
        dependencies: {
          next: '14.2.5',
          react: '18.3.1',
          'react-dom': '18.3.1'
        },
        devDependencies: {
          typescript: '5.5.4',
          '@types/react': '18.3.3',
          '@types/node': '20.14.10',
          tailwindcss: '3.4.10',
          autoprefixer: '10.4.20',
          postcss: '8.4.41'
        }
      },
      null,
      2
    )
  );

  // next.config.ts
  await writeFile(
    path.join(outDir, 'next.config.ts'),
    `import type { NextConfig } from 'next';
const nextConfig: NextConfig = { reactStrictMode: true };
export default nextConfig;
`
  );

  // tsconfig.json
  await writeFile(
    path.join(outDir, 'tsconfig.json'),
    JSON.stringify(
      {
        compilerOptions: {
          target: 'ES2022',
          lib: ['ES2022', 'DOM', 'DOM.Iterable'],
          jsx: 'preserve',
          module: 'ESNext',
          moduleResolution: 'Bundler',
          strict: true,
          noEmit: true,
          resolveJsonModule: true,
          isolatedModules: true,
          incremental: true,
          types: ['@types/node']
        },
        include: ['next-env.d.ts', '**/*.ts', '**/*.tsx'],
        exclude: ['node_modules']
      },
      null,
      2
    )
  );

  await writeFile(path.join(outDir, 'next-env.d.ts'), `/// <reference types="next" />\n/// <reference types="next/image-types/global" />\n`);

  // Tailwind and PostCSS
  await writeFile(
    path.join(outDir, 'tailwind.config.ts'),
    `import type { Config } from 'tailwindcss';
export default {
  content: ['./app/**/*.{ts,tsx}', './components/**/*.{ts,tsx}'],
  theme: { extend: {} },
  plugins: [],
} satisfies Config;
`
  );
  await writeFile(
    path.join(outDir, 'postcss.config.js'),
    `export default { plugins: { tailwindcss: {}, autoprefixer: {} } };
`
  );
  await writeFile(
    path.join(outDir, 'app', 'globals.css'),
    `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`
  );

  // Basic App Router structure
  await writeFile(
    path.join(appDir, 'layout.tsx'),
    `export default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"min-h-screen bg-white text-gray-900\">{children}</body>\n    </html>\n  );\n}\n`
  );
  await writeFile(
    path.join(appDir, 'page.tsx'),
    `export default function Page() {\n  return (\n    <main className=\"p-6\">\n      <h1 className=\"text-2xl font-bold\">Site2TS Scaffold</h1>\n      <p className=\"mt-2 text-gray-600\">Generated by Site2TS scaffold.</p>\n    </main>\n  );\n}\n`
  );

  // Placeholder assets folder for generated assets later
  await ensureDir(path.join(appDir, '(site2ts)', 'assets'));

  return { jobId, scaffoldId, outDir };
}

